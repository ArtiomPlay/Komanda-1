@page "/aimtrainer"
@inject Projektas.Services.AimTrainerService AimService
@inject Projektas.Services.TimerService TimerService
@rendermode InteractiveServer

<PageTitle>Aim Trainer</PageTitle>

<div style="text-align: center; margin-bottom: 20px;">
    <h1>Aim Trainer</h1>
    <div>
        <label>
            <input type="radio" name="difficulty" value="Normal" checked @onchange="OnDifficultyChanged" disabled="@isGameActive" /> Normal
        </label>
        <label>
            <input type="radio" name="difficulty" value="Hard" @onchange="OnDifficultyChanged" disabled="@isGameActive" /> Hard
        </label>
    </div>
</div>

<div style="display: flex; justify-content: center; align-items: center; margin-bottom: 20px; flex-direction: column;">
    <div style="text-align: center; width: 100%; max-width: 1000px; margin: auto;">
        @if (!isGameActive)
        {
            @if (!isGameOver)
            {
                <div style="margin-top: 20px;">
                    <button class="btn btn-primary" @onclick="StartGame" style="padding: 10px 20px;">Start Game</button>
                </div>
            }
            else
            {
                <div>
                    <h2>Game Over!</h2>
                    <h3>Your Final Score: @AimService.Score</h3>
                    <button class="btn btn-primary" @onclick="TryAgain" style="padding: 10px 20px;">Replay</button>
                </div>
            }
        }
        else
        {
            <div style="position: relative; width: 100%; max-width: 1000px; height: 400px; background-color: lightgray; margin: auto; border: solid; border-radius: 4px; border-color: #7a7a7a; user-select: none;">
                <button @onclick="OnTargetClicked"
                        style="position: absolute; left:@(AimService.TargetPosition.x)px; top:@(AimService.TargetPosition.y)px;
                        width: @(AimService.IsHardMode ? 30 : 50)px; height: @(AimService.IsHardMode ? 30 : 50)px;
                        background-color: @(AimService.GetTargetColor(AimService.IsHardMode)); border: none; border-radius: 50%;">
                </button>
            </div>
        }
    </div>

    <div style="display: flex; justify-content: flex-end; margin-right: 20px; width: 100%; max-width: 1000px;">
        @if (isGameActive)
        {
            <h4 style="font-size: 18px; margin-right: 10px;">Score: @AimService.Score</h4>
            <h4 style="font-size: 18px;">Time Remaining: @TimerService.GetRemainingTime() seconds</h4>
        }
    </div>
</div>

@code {
    private bool isGameActive = false;
    private bool isGameOver = false;
    private bool isHardMode = false;
    private System.Timers.Timer? moveDotTimer;

    private void OnDifficultyChanged(ChangeEventArgs e)
    {
        if (!isGameActive)
        {
            isHardMode = e.Value?.ToString() == "Hard";
            AimService.IsHardMode = isHardMode;
        }
    }

    private void StartGame()
    {
        isGameActive = true;
        isGameOver = false;
        AimService.ResetGame(1000, 400);
        TimerService.Start(30);
        TimerService.OnTick += TimerTick;

        if (isHardMode)
        {
            StartMovingDotTimer(); 
        }

        StateHasChanged();
    }

    private void StartMovingDotTimer()
    {
        moveDotTimer = new System.Timers.Timer(10);
        moveDotTimer.Elapsed += (sender, e) =>
        {
            AimService.MoveTarget(1000, 400); 
            InvokeAsync(StateHasChanged);
        };
        moveDotTimer.Start();
    }

    private void TimerTick()
    {
        if (TimerService.GetRemainingTime() == 0)
        {
            EndGame();
        }
        else
        {
            InvokeAsync(StateHasChanged); 
        }
    }

    private void OnTargetClicked()
    {
        if (TimerService.GetRemainingTime() > 0)
        {
            AimService.RegisterHit(1000, 400);
            StateHasChanged();
        }
    }

    private async Task EndGame()
    {
        isGameActive = false;
        isGameOver = true;
        TimerService.OnTick -= TimerTick;
        moveDotTimer?.Stop();
        moveDotTimer?.Dispose();
        await InvokeAsync(StateHasChanged);
    }

    private void TryAgain()
    {
        isGameOver = false;
        StartGame();
    }

    public void Dispose()
    {
        TimerService.OnTick -= TimerTick;
        moveDotTimer?.Stop(); 
        moveDotTimer?.Dispose();
    }
}
